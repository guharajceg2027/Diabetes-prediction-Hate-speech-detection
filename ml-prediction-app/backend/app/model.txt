

## 🧠 ML Models Overview in Code


1. **Hate Speech Detection** using **Logistic Regression**
2. **Diabetes Prediction** using **Random Forest Classifier**

---

## 1️⃣ Hate Speech Detection – Logistic Regression

### 📁 Class: `HateSpeechDetector`

### 🔧 Step-by-Step Breakdown:

#### **1. Initialization (`__init__`)**

```python
self.vectorizer = TfidfVectorizer(max_features=5000, stop_words='english')
self.model = LogisticRegression()
```

* Initializes:

  * `TfidfVectorizer`: Converts text to a numerical format using word importance.
  * `LogisticRegression`: A classifier for binary output (hate or not hate).
* Calls:

  * `self._create_sample_data()`: Creates training data.
  * `self.train()`: Trains the model.

---

#### **2. Data Creation (`_create_sample_data`)**

```python
hate_speech_data = [("I hate all people from that country", 1), ..., ("I admire your honesty", 0)]
expanded_data = hate_speech_data * 10
```

* A labeled dataset of text samples is created:

  * `1` = hate speech
  * `0` = normal speech
* The dataset is repeated 10 times to simulate more samples for training.

---

#### **3. Preprocessing (`preprocess_text`)**

```python
text = text.lower()
text = re.sub(r'[^a-zA-Z\s]', '', text)
text = ' '.join(text.split())
```

* Lowercases all text
* Removes digits, punctuation using regex
* Strips extra spaces

---

#### **4. Model Training (`train`)**

```python
processed_texts = [self.preprocess_text(text) for text in self.X]
X_vectorized = self.vectorizer.fit_transform(processed_texts)
X_train, X_test, y_train, y_test = train_test_split(...)
self.model.fit(X_train, y_train)
```

* All texts are cleaned and transformed into a sparse matrix using **TF-IDF**
* Data is split into training (80%) and testing (20%)
* `LogisticRegression` is trained using `fit()`
* Predictions on the test set are made and **accuracy** is printed:

```python
accuracy = accuracy_score(y_test, y_pred)
```

---

#### **5. Prediction (`predict` method)**

```python
processed_text = self.preprocess_text(text)
vectorized_text = self.vectorizer.transform([processed_text])
prediction = self.model.predict(vectorized_text)[0]
```

* A new input text is cleaned, vectorized, and passed to the model
* Returns:

  * `"Hate Speech"` or `"Normal Speech"`

---

#### **6. Confidence (`get_confidence`)**

```python
probabilities = self.model.predict_proba(vectorized_text)[0]
return max(probabilities)
```

* Uses the logistic regression probability score to tell how confident the model is in its prediction.

---

### ✅ Summary of Hate Speech Model

| Component          | Technique Used               |
| ------------------ | ---------------------------- |
| Feature Extraction | `TfidfVectorizer`            |
| Classifier         | `LogisticRegression`         |
| Evaluation Metric  | `accuracy_score`             |
| Output             | `"Hate Speech"` / `"Normal"` |
| Data               | Manual + replicated dataset  |

---

## 2️⃣ Diabetes Prediction – Random Forest Classifier

### 📁 Class: `DiabetesPredictor`

---

### 🔧 Step-by-Step Breakdown:

#### **1. Initialization (`__init__`)**

```python
self.model = RandomForestClassifier(n_estimators=100, random_state=42)
```

* Initializes the **Random Forest** model with 100 trees.
* Calls:

  * `self._create_sample_data()`
  * `self.train()`

---

#### **2. Data Generation (`_create_sample_data`)**

```python
np.random.seed(42)
n_samples = 1000
```

* **Synthetic dataset** is generated using NumPy with:

  * `pregnancies`, `glucose`, `blood_pressure`, etc.
* Risk score is manually calculated using:

```python
diabetes_risk = (glucose > 140)*0.3 + (bmi > 30)*0.2 + ...
```

* Final label (`0` or `1`) is determined if `risk + noise > 0.4`.

---

#### **3. Model Training (`train`)**

```python
X_train, X_test, y_train, y_test = train_test_split(...)
self.model.fit(X_train, y_train)
```

* Data is split 80/20.
* `RandomForestClassifier` is trained.
* Accuracy of prediction is printed using:

```python
accuracy_score(y_test, y_pred)
```

---

#### **4. Prediction (`predict`)**

```python
features_array = np.array(features).reshape(1, -1)
prediction = self.model.predict(features_array)[0]
```

* Takes user input (medical features), reshapes to 2D array
* Returns `0` (no diabetes) or `1` (has diabetes)

---

#### **5. Probability (`get_probability`)**

```python
probability = self.model.predict_proba(features_array)[0][1]
```

* Returns probability of having diabetes (value between 0 and 1)

---

### ✅ Summary of Diabetes Model

| Component         | Technique Used               |
| ----------------- | ---------------------------- |
| Model             | `RandomForestClassifier`     |
| Feature Count     | 8 medical features           |
| Data              | Simulated using NumPy        |
| Evaluation Metric | `accuracy_score`             |
| Output            | `0` (no diabetes), `1` (yes) |
| Probability       | `predict_proba()`            |

---

## 📊 Visual Suggestion (for Report/Slides)

Here’s how you could visualize both systems:

```
             Hate Speech Detector                    Diabetes Predictor
        -----------------------------          -------------------------------
        Text Input                          |  Tabular Medical Data Input
        ↓                                   |  ↓
  Preprocess (lowercase, clean)             |  Normalize & Shape Input
        ↓                                   |  ↓
 TF-IDF Vectorizer (5000 words)             |  Features: glucose, age, bmi, etc.
        ↓                                   |  ↓
 Logistic Regression Model                  |  Random Forest Classifier
        ↓                                   |  ↓
Output: Hate/Normal + Confidence            |  Output: Diabetic/Not + Confidence
```

